{"version":3,"file":"src_app_auth_auth_module_ts.js","mappings":"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","sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/auth/register/register.component.ts","./src/app/auth/register/register.component.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { NbAuthComponent } from '@nebular/auth';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: NbAuthComponent,\n    children: [\n      {\n        path: '',\n        component: LoginComponent, // <---\n      },\n      {\n        path: 'login',\n        component: LoginComponent, // <---\n      },\n      {\n        path: 'register',\n        component: RegisterComponent, // <---\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { NbAuthModule } from '@nebular/auth';\nimport { \n  NbAlertModule,\n  NbButtonModule,\n  NbCheckboxModule,\n  NbInputModule\n} from '@nebular/theme';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\n\n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    RegisterComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n    NbAlertModule,\n    NbInputModule,\n    NbButtonModule,\n    NbCheckboxModule,\n    AuthRoutingModule,\n  ]\n})\nexport class AuthModule { }\n","import { ChangeDetectorRef, Component, inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NbAuthService, NbLoginComponent } from '@nebular/auth';\nimport { error } from 'console';\nimport { CustomUser } from '../../models/user-class';\nimport { catchError, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { UserMgrService } from '../../services/user-mgr.service';\n\n@Component({\n  selector: 'ngx-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent extends NbLoginComponent{\n  // options: {}\n  user: CustomUser;\n  private userMgrService = inject(UserMgrService);\n\n// protected service: NbAuthService;\n// protected userMgrService: UserMgrService;\n/*  protected options: {};\n  protected cd: ChangeDetectorRef;\n  protected router: Router;\n  protected usrMgrService: UsrMgrService; */\n\n// protected options: {};\n// protected cd: ChangeDetectorRef;\n// protected router: Router;\n// super(service, {}, cd, router);\n\n\n  /* constructor(  \n    protected service: NbAuthService,\n    protected cd: ChangeDetectorRef,\n    protected router: Router,\n    private userMgrService: UserMgrService,\n    ){\n    super(service, {}, cd, router);\n  }  */\n\n\n  loginAlt(): void {\n    console.log('Login attempt');\n    /* this.service.isAuthenticated().subscribe(\n      (data) => // console.log(data),\n      (error) => console.log(error)); */\n    /* this.service.authenticate('email', {email: this.user.email, password: this.user.password}).pipe(\n      tap ( response => console.log(`Login response : ${response}`)),\n      catchError ( error => {\n        console.log(`Login error : ${error}`);\n        return of();\n      })\n    ); */\n    if(this.user.email.includes('guest')){\n      //this.user.role = 'guest';\n      // this.userMgrService.currentUser.role = this.user.role;\n      this.userMgrService.getUserbyIdAlt('9');\n    }\n\n    if(this.user.email.includes('manager')){\n      // this.user.role = 'manager';\n      // this.userMgrService.currentUser.role = this.user.role;\n      this.userMgrService.getUserbyIdAlt('10')\n    }\n\n    if(this.user.email.includes('admin')){\n      // this.user.role = 'admin';\n      // this.userMgrService.currentUser.role = this.user.role;\n      this.userMgrService.getUserbyIdAlt('11')\n    }\n    \n    if(this.userMgrService.currentUser.id){\n      this.router.navigate(['/pages']);\n    }\n    // this.router.navigate(['/pages']);\n  }\n\n\n  login(): void {\n    console.log('Login attempt');\n    if(this.user.email.includes('guest')){\n      this.userMgrService.getUserbyId('9').subscribe(\n        (user) => this.router.navigate(['/pages'])\n      );\n    }\n\n    if(this.user.email.includes('manager')){\n      this.userMgrService.getUserbyId('10').subscribe(\n        (user) => this.router.navigate(['/pages'])\n      );\n    }\n\n    if(this.user.email.includes('admin')){\n      this.userMgrService.getUserbyId('11').subscribe(\n        (user) => this.router.navigate(['/pages'])\n      );\n    }\n  }\n}\n","<h1 id=\"title\" class=\"title\">Connexion</h1>\n<p class=\"sub-title\">Connectez-vous avec votre adresse email.</p>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Désolé !</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Succès !</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"login()\" #form=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Adresse email</label>\n    <input nbInput\n           fullWidth\n           [(ngModel)]=\"this.user.email\"\n           #email=\"ngModel\"\n           name=\"email\"\n           id=\"input-email\"\n           pattern=\".+@.+\\..+\"\n           placeholder=\"Email address\"\n           fieldSize=\"large\"\n           autofocus\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.email.required')\"\n           [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\n    <ng-container *ngIf=\"email.invalid && email.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.required\">\n        Ce champ est obligtoire !\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.pattern\">\n        L'adresse email doit être correcte !\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <span class=\"label-with-link\">\n      <label class=\"label\" for=\"input-password\">Mot de passe</label>\n      <a class=\"forgot-password caption-2\" routerLink=\"../request-password\">Mot de passe oublié ?</a>\n    </span>\n    <input nbInput\n           fullWidth\n           [(ngModel)]=\"this.user.password\"\n           #password=\"ngModel\"\n           name=\"password\"\n           type=\"password\"\n           id=\"input-password\"\n           placeholder=\"Password\"\n           fieldSize=\"large\"\n           [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n           [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\n    <ng-container *ngIf=\"password.invalid && password.touched \">\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.required\">\n        Ce champ est obligatoire !\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\n        Le mot de passe doit contenir\n        de {{ getConfigValue('forms.validation.password.minLength') }}\n        à {{ getConfigValue('forms.validation.password.maxLength') }}\n        caractères\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group accept-group\">\n    <nb-checkbox name=\"rememberMe\" [(ngModel)]=\"user.rememberMe\" *ngIf=\"rememberMe\">Rester connecté</nb-checkbox>\n  </div>\n\n  <button nbButton\n          fullWidth\n          status=\"primary\"\n          size=\"large\"\n          [disabled]=\"submitted || !form.valid\"\n          [class.btn-pulse]=\"submitted\">\n    Se connecter\n  </button>\n</form>\n\n<section *ngIf=\"socialLinks && socialLinks.length > 0\" class=\"links\" aria-label=\"Social sign in\">\n  or enter with:\n  <div class=\"socials\">\n    <ng-container *ngFor=\"let socialLink of socialLinks\">\n      <a *ngIf=\"socialLink.link\"\n         [routerLink]=\"socialLink.link\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">\n        <nb-icon *ngIf=\"socialLink.icon; else title\" [icon]=\"socialLink.icon\"></nb-icon>\n        <ng-template #title>{{ socialLink.title }}</ng-template>\n      </a>\n      <a *ngIf=\"socialLink.url\"\n         [attr.href]=\"socialLink.url\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">\n        <nb-icon *ngIf=\"socialLink.icon; else title\" [icon]=\"socialLink.icon\"></nb-icon>\n        <ng-template #title>{{ socialLink.title }}</ng-template>\n      </a>\n    </ng-container>\n  </div>\n</section>\n\n<section class=\"another-action\" aria-label=\"Register\">\n  Vous n'avez pas de compte ? <a class=\"text-link\" routerLink=\"../register\">S'inscrire</a>\n</section>\n\n","import { Component } from '@angular/core';\nimport { NbRegisterComponent, NbUser } from '@nebular/auth';\n\n@Component({\n  selector: 'ngx-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent extends NbRegisterComponent {\n}\n","<h1 id=\"title\" class=\"title\">Inscription</h1>\n<p class=\"mt-4\">\n    <strong class=\"text-success\">Information : </strong>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut \n    labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris \n    nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit \n    esse cillum dolore eu fugiat nulla pariatur. \n</p>\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Désolé !</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Succès !</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"register()\" #form=\"ngForm\" aria-labelledby=\"title\">\n\n    <!-- Nom -->\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-name\">Nom</label>\n    <input nbInput\n           [(ngModel)]=\"user.name\"\n           #name=\"ngModel\"\n           id=\"input-name\"\n           name=\"name\"\n           placeholder=\"Nom\"\n           autofocus\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"name.dirty ? (name.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.name.required')\"\n           [minlength]=\"getConfigValue('forms.validation.name.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.name.maxLength')\"\n           [attr.aria-invalid]=\"name.invalid && name.touched ? true : null\">\n    <ng-container *ngIf=\"name.invalid && name.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"name.errors?.required\">\n        Ce champ est obligatoire !\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"name.errors?.minlength || name.errors?.maxlength\">\n        Ce champ doit contenir\n        entre {{getConfigValue('forms.validation.name.minLength')}}\n        et {{getConfigValue('forms.validation.name.maxLength')}}\n        caractères\n      </p>\n    </ng-container>\n  </div>\n\n  <!-- Prénoms -->\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-name\">Prénoms</label>\n    <input nbInput\n           [(ngModel)]=\"user.secondName\"\n           #secondName=\"ngModel\"\n           id=\"input-second-name\"\n           name=\"secondName\"\n           placeholder=\"Prénoms\"\n           autofocus\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"secondName.dirty ? (secondName.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.secondName.required')\"\n           [minlength]=\"getConfigValue('forms.validation.secondName.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.secondName.maxLength')\"\n           [attr.aria-invalid]=\"secondName.invalid && secondName.touched ? true : null\">\n    <ng-container *ngIf=\"secondName.invalid && secondName.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"secondName.errors?.required\">\n        Ce champ est obligatoire !\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"secondName.errors?.minlength || secondName.errors?.maxlength\">\n        Ce champ doit contenir\n        entre {{getConfigValue('forms.validation.secondName.minLength')}}\n        et {{getConfigValue('forms.validation.secondName.maxLength')}}\n        caractères\n      </p>\n    </ng-container>\n  </div>\n\n  <!-- téléphone -->\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Téléphone</label>\n    <input nbInput\n           [(ngModel)]=\"user.telephone\"\n           #telephone=\"ngModel\"\n           id=\"input-telephone\"\n           name=\"telephone\"\n           placeholder=\"Téléphone\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"telephone.dirty ? (telephone.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.telephone.required')\"\n           [attr.aria-invalid]=\"telephone.invalid && telephone.touched ? true : null\">\n    <ng-container *ngIf=\"telephone.invalid && telephone.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"telephone.errors?.required\">\n        Ce champ est obligatoire!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"telephone.errors?.pattern\">\n        Le numéro de téléphone doit être correct !\n      </p>\n    </ng-container>\n  </div>\n\n  <!-- email -->\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Adresse email</label>\n    <input nbInput\n           [(ngModel)]=\"user.email\"\n           #email=\"ngModel\"\n           id=\"input-email\"\n           name=\"email\"\n           pattern=\".+@.+..+\"\n           placeholder=\"Adresse email\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.email.required')\"\n           [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\n    <ng-container *ngIf=\"email.invalid && email.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.required\">\n        Ce champ est obligatoire!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.pattern\">\n        L'adresse email doit être correcte !\n      </p>\n    </ng-container>\n  </div>\n    \n  <!-- Entreprise -->\n    <div class=\"form-control-group\">\n        <label class=\"label\" for=\"input-name\">Organisation</label>\n        <input nbInput\n               [(ngModel)]=\"user.organisation\"\n               #organisation=\"ngModel\"\n               id=\"input-organisation\"\n               name=\"organisation\"\n               placeholder=\"Nom de l'organaisation (entreprise ou administration)\"\n               autofocus\n               fullWidth\n               fieldSize=\"large\"\n               [status]=\"organisation.dirty ? (organisation.invalid  ? 'danger' : 'success') : 'basic'\"\n               [required]=\"getConfigValue('forms.validation.organisation.required')\"\n               [minlength]=\"getConfigValue('forms.validation.organisation.minLength')\"\n               [maxlength]=\"getConfigValue('forms.validation.organisation.maxLength')\"\n               [attr.aria-invalid]=\"organisation.invalid && organisation.touched ? true : null\">\n        <ng-container *ngIf=\"organisation.invalid && organisation.touched\">\n          <!-- <p class=\"caption status-danger\" *ngIf=\"organisation.errors?.required\">\n            Ce champ est obligatoire !\n          </p> -->\n          <p class=\"caption status-danger\" *ngIf=\"organisation.errors?.minlength || organisation.errors?.maxlength\">\n            Ce champ doit contenir\n            entre {{getConfigValue('forms.validation.organisation.minLength')}}\n            et {{getConfigValue('forms.validation.organisation.maxLength')}}\n            caractères\n          </p>\n        </ng-container>\n      </div>\n\n        <!-- Fonction -->\n    <div class=\"form-control-group\">\n        <label class=\"label\" for=\"input-name\">Fonction</label>\n        <input nbInput\n               [(ngModel)]=\"user.fonction\"\n               #fonction=\"ngModel\"\n               id=\"input-fonction\"\n               name=\"fonction\"\n               placeholder=\"Fonction au sein de l'organaisation\"\n               autofocus\n               fullWidth\n               fieldSize=\"large\"\n               [status]=\"fonction.dirty ? (fonction.invalid  ? 'danger' : 'success') : 'basic'\"\n               [required]=\"getConfigValue('forms.validation.fonction.required')\"\n               [minlength]=\"getConfigValue('forms.validation.fonction.minLength')\"\n               [maxlength]=\"getConfigValue('forms.validation.fonction.maxLength')\"\n               [attr.aria-invalid]=\"fonction.invalid && fonction.touched ? true : null\">\n        <ng-container *ngIf=\"fonction.invalid && fonction.touched\">\n          <!-- <p class=\"caption status-danger\" *ngIf=\"organisation.errors?.required\">\n            Ce champ est obligatoire !\n          </p> -->\n          <p class=\"caption status-danger\" *ngIf=\"fonction.errors?.minlength || fonction.errors?.maxlength\">\n            Ce champ doit contenir\n            entre {{getConfigValue('forms.validation.fonction.minLength')}}\n            et {{getConfigValue('forms.validation.fonction.maxLength')}}\n            caractères\n          </p>\n        </ng-container>\n      </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-password\">Mot de passe</label>\n    <input nbInput\n           [(ngModel)]=\"user.password\"\n           #password=\"ngModel\"\n           type=\"password\"\n           id=\"input-password\"\n           name=\"password\"\n           placeholder=\"Mot de passe\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n           [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\n    <ng-container *ngIf=\"password.invalid && password.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.required\">\n        Ce champ est obligatoire !\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\n        Le mot de passe doit contenir\n        entre {{ getConfigValue('forms.validation.password.minLength') }}\n        et {{ getConfigValue('forms.validation.password.maxLength') }}\n        caractères\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-re-password\">Confirmer le mot de passe</label>\n    <input nbInput\n           [(ngModel)]=\"user.confirmPassword\"\n           #rePass=\"ngModel\"\n           type=\"password\"\n           id=\"input-re-password\"\n           name=\"rePass\"\n           placeholder=\"Confirmer le mot de passe\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"rePass.dirty ? (rePass.invalid || password.value != rePass.value  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [attr.aria-invalid]=\"rePass.invalid && rePass.touched ? true : null\">\n    <ng-container *ngIf=\"rePass.invalid && rePass.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"rePass.errors?.required\">\n        Ce champ est obligatoire !\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.value != rePass.value && !rePass.errors?.required\">\n        Les mots de passe ne correspondent pas.\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group accept-group\" *ngIf=\"getConfigValue('forms.register.terms')\">\n    <nb-checkbox name=\"terms\" [(ngModel)]=\"user.terms\" [required]=\"getConfigValue('forms.register.terms')\">\n      Je donne mon consentement pour le traitement de mes données à caractère personnel. <a href=\"#\" target=\"_blank\"><strong>Politique de confidentialité</strong></a>\n    </nb-checkbox>\n  </div>\n\n  <button nbButton\n          fullWidth\n          status=\"primary\"\n          size=\"large\"\n          [disabled]=\"submitted || !form.valid\"\n          [class.btn-pulse]=\"submitted\">\n    S'enregistrer\n  </button>\n</form>\n\n<section *ngIf=\"socialLinks && socialLinks.length > 0\" class=\"links\" aria-label=\"Social sign in\">\n  or enter with:\n  <div class=\"socials\">\n    <ng-container *ngFor=\"let socialLink of socialLinks\">\n      <a *ngIf=\"socialLink.link\"\n         [routerLink]=\"socialLink.link\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">\n        <nb-icon *ngIf=\"socialLink.icon; else title\" [icon]=\"socialLink.icon\"></nb-icon>\n        <ng-template #title>{{ socialLink.title }}</ng-template>\n      </a>\n      <a *ngIf=\"socialLink.url\"\n         [attr.href]=\"socialLink.url\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">\n        <nb-icon *ngIf=\"socialLink.icon; else title\" [icon]=\"socialLink.icon\"></nb-icon>\n        <ng-template #title>{{ socialLink.title }}</ng-template>\n      </a>\n    </ng-container>\n  </div>\n</section>\n\n<section class=\"another-action\" aria-label=\"Sign in\">\n  Vous avez déjà un compte ? <a class=\"text-link\" routerLink=\"../login\">Connectez-vous</a>\n</section>\n\n"],"names":["RouterModule","NbAuthComponent","LoginComponent","RegisterComponent","routes","path","component","children","AuthRoutingModule","forChild","imports","exports","CommonModule","FormsModule","NbAlertModule","NbButtonModule","NbCheckboxModule","NbInputModule","AuthModule","declarations","inject","NbLoginComponent","UserMgrService","i0","constructor","loginAlt","console","log","user","email","includes","userMgrService","getUserbyIdAlt","currentUser","id","router","navigate","login","getUserbyId","subscribe","selectors","features","decls","vars","consts","template","ctx","NbRegisterComponent"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}